
#+OPTIONS: ':t *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:nil broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:nil title:t toc:nil todo:t |:t
#+TITLE: Minecraft AI Assignments (Part 1)
#+DATE: <2018-09-29>
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.1 (Org mode 9.1.13)

#+BEGIN_SRC emacs-lisp :exports none
(setq minecraft-ai-path (file-name-directory buffer-file-name))
(add-to-list 'org-publish-project-alist
             (list
              "minecraft-assignments-org"
              :base-directory minecraft-ai-path
              :base-extension "org"
              ;; Ignore any answers files
              :exclude "lp.org\\'"
              :publishing-directory minecraft-ai-path
              :recursive t
              :publishing-function 'org-html-publish-to-html
              :headline-levels 4
              :auto-preamble t
              :header-args '(:exports code :eval never-export)
              ))
(add-to-list 'org-publish-project-alist
             (list
              "minecraft-assignments-static"
              :base-directory minecraft-ai-path
              :base-extension "css\\'\\|js\\'\\|png\\'\\|jpeg\\'\\|jpg\\'\\|gif\\'\\|pdf\\'\\|mp3\\'\\|ogg\\'\\|swf\\'"
              ;; Leave out datasets and html folder (doesn't really work sadly)
              :exclude "Data\\|html"
              :publishing-directory minecraft-ai-path             
              :recursive t
              :publishing-function 'org-publish-attachment
              ))
(add-to-list 'org-publish-project-alist
             (list
              "minecraft-assignments"           
              :components (list
                           "minecraft-assignments-org" 
                           "minecraft-assignments-static")))
(message "ok")
#+END_SRC


| Summary      | A large package of interesting projects in Minecraft-like domains with applications to Minecraft itself.  These assignments cover a variety of AI topics from path and task planning to constraint satisfaction.                                                                                                                                                 |
| Topics       | Path planning, classical planning, iterative widening, constraint satisfaction, linear programming, integer programming                                                                                                                                                                                                                                          |
| Audience     | Upper division undergraduate students in a general AI course; could be scaled down to early stage undergraduates                                                                                                                                                                                                                                                 |
| Difficulty   | Moderate to high, depending how much sample code is provided and how much scaffolding is given                                                                                                                                                                                                                                                                   |
| Strengths    | Plenty of analytic as well as implementation work, interesting domain for students                                                                                                                                                                                                                                                                               |
| Weaknesses   | Each topic is covered in only as much depth as a week or two will allow.                                                                                                                                                                                                                                                                                         |
| Dependencies | Python examples are provided although Malmo should work with Java or C# as well.  A Conda-based installation process is given which may or may not work out of the box on Windows (only the Malmo portion could pose difficulty).  Students should be familiar with graph search from algorithms coursework.  Python knowledge a plus but not strictly required. |
| Variants     | This is just a sampling of possible assignments in the Minecraft domain.  These can be given with more or less scaffolding and analytic content, in almost any order.  In the linear and integer programming portions, students could be responsible for implementing their own solvers.                                                                         |

Setting up the environment is detailed in [[file:setup.org][Setup]].

Each assignment has an automatic grading test suite as well as narrative writeups with plenty of scaffolding.

These projects are split into four major assignments:

1. Path and task planning, in two parts:
  - [[file:Pathfinding/path-planning-four-ways.org][Path Planning Four Ways]]
  - [[file:CraftingPlanning/crafting-with-iw.org][Crafting with Iterative Widening]]
  - Associated files:
    - [[file:Pathfinding/terrain.txt]]
    - [[file:Pathfinding/test_path_planning.py]]
    - [[file:CraftingPlanning/crafting.json]]
2. Linear programming with applications to metric task planning, also in two parts:
  - [[file:SchedulingLinProg/linprog_castle.org][Building a Castle with Linear Programming]]
  - [[file:SchedulingLinProg/intprog_planning.org][Integer Programming for Production Planning]]
  - Associated files:
    - [[file:SchedulingLinProg/crafting.json]]
