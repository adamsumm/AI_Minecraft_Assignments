#+OPTIONS: ':t *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:nil broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:nil title:t toc:nil todo:t |:t
#+TITLE: Redstone Puzzles
#+DATE: <2018-08-23>
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.1 (Org mode 9.1.13)

Minecraft has a special material called /Redstone/ which acts like a carrier for a discrete signal---a bit like an electrical wire.
Enterprising users have designed Redstone circuitry controlled by pressure plates to perform all kinds of tasks (including general-purpose computation by implementing Turing machines).
We'll look at a simpler domain: you are building a maze for some friends to solve, where they must press down particular combinations of buttons in the maze (linked via NAND, NOR, AND, OR, XOR, and NOT gates) in order to open subsequent doors.
Because you are just one person, it's hard to imagine testing these combination locks; you'll therefore /verify/ your designs using a SAT solver of your own making.
All puzzles have the basic form that there are $M$ buttons, and pressing some subset of them causes the door to open (i.e., the formula to evaluate to true).
 
In this assignment, you will be making a simple SAT solver and using it to evaluate Redstone circuit puzzles.
Given a puzzle, you'll want to ensure that it can be solved and, perhaps, that it only has one valid solution.
You will implement your own SAT solver based on WalkSAT, then add unit clause resolution as a form of preprocessing.

In this assignment you will:

- Implement a stochastic SAT solver
- Represent your puzzle circuits as logical formulae in CNF, and write a translation to CNF
- Verify that your puzzles are solvable
- Ensure that your puzzles have just one solution

The goal of this assignment is for you to understand:

- How to manipulate logical formulae, both by creating/importing them and by optimizing them with techniques like unit resolution
- How to mechanize syntactic logical inference
- The behavior of stochastic local search in solving these problems
